/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizadorC = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[5,7],$V2=[1,16],$V3=[1,23],$V4=[1,14],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[2,8,11,19,29,30,31,32,33,34],$Vc=[24,25],$Vd=[2,19],$Ve=[1,34],$Vf=[16,25],$Vg=[2,74],$Vh=[1,46],$Vi=[1,49],$Vj=[1,42],$Vk=[1,43],$Vl=[1,44],$Vm=[1,45],$Vn=[1,47],$Vo=[1,48],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[2,66],$Vt=[1,58],$Vu=[1,62],$Vv=[1,63],$Vw=[1,64],$Vx=[1,65],$Vy=[1,66],$Vz=[1,67],$VA=[1,68],$VB=[1,69],$VC=[1,70],$VD=[1,71],$VE=[1,72],$VF=[1,73],$VG=[1,74],$VH=[1,75],$VI=[1,76],$VJ=[16,24,25,39,40,41,42,43,44,45,46,47,48,49,50,51,52,100],$VK=[16,24,25,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,100],$VL=[2,56],$VM=[1,81],$VN=[1,124],$VO=[1,125],$VP=[2,77],$VQ=[1,127],$VR=[1,133],$VS=[1,134],$VT=[1,135],$VU=[1,136],$VV=[1,132],$VW=[1,129],$VX=[1,130],$VY=[1,131],$VZ=[16,24,25,39,40,100],$V_=[16,24,25,39,40,41,42,43,44,45,46,100],$V$=[16,24,25,39,40,41,42,43,44,45,46,47,48,100],$V01=[16,24,25,39,40,41,42,43,44,45,46,47,48,49,50,100],$V11=[11,99,101],$V21=[2,8,11,29,30,31,32,33,34,79,84,85,86,89,94,99,101,102,103,104],$V31=[1,151],$V41=[2,8,11,29,30,31,32,33,34,79,84,85,86,89,93,94,99,101,102,103,104],$V51=[1,216],$V61=[1,215];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONTENIDO":4,"EOF":5,"CLASES":6,"R_Class":7,"Identificador":8,"S_LlaveAbre":9,"LISTA_CLASES":10,"S_LlaveCierra":11,"CONTENIDO_CLASE":12,"TIPO_DATO":13,"S_ParentesisAbre":14,"PARAMETROS":15,"S_ParentesisCierra":16,"INSTRUCCIONES":17,"VARIABLE":18,"R_Void":19,"METODO_VOID":20,"LLAMAR_METODOF_CLASE":21,"R_Main":22,"LISTADO_ID_VARIABLE":23,"S_PuntoComa":24,"S_Coma":25,"CONTENIDO_VARIABLE":26,"S_Igual":27,"EXPRESION_G":28,"T_Int":29,"T_String":30,"T_Boolean":31,"T_Char":32,"T_Double":33,"T_string":34,"MODIFICADORES_ACCESO":35,"R_Protected":36,"R_Public":37,"R_Private":38,"LOG_Concatenar":39,"LOG_OR":40,"REL_IgualIgual":41,"REL_MayorIgualQue":42,"REL_MayorQue":43,"REL_MenorIgualQue":44,"REL_MenorQue":45,"REL_Distinto":46,"OP_Mas":47,"OP_Menos":48,"OP_Multiplicacion":49,"OP_Division":50,"OP_Potencia":51,"OP_Modulo":52,"CONTENIDO_EXPRESION":53,"OP_Decremento":54,"OP_Incremento":55,"LOG_Not":56,"Entero":57,"Decimal":58,"OPCIONAL":59,"R_True":60,"R_False":61,"Cadena":62,"Char":63,"CHAR_Especial":64,"FUNC":65,"DEFINIR_PARAMETRO":66,"LISTA_PARAMETROS":67,"METODOS_LL":68,"PARAMETROS_FUNC":69,"LISTA_INS":70,"LISTA_INSTRUCCIONES":71,"IMPRIMIR":72,"SENT_IF":73,"LOOP_WHILE":74,"LOOP_DO_WHILE":75,"LOOP_FOR":76,"SENT_SWITCH":77,"S_TRANSFERENCIA":78,"R_Console":79,"S_Punto":80,"TIPO_IMPRESION":81,"R_Write":82,"R_WriteLine":83,"R_Break":84,"R_Continue":85,"R_Return":86,"IF_FIJO":87,"DEF_IF":88,"R_If":89,"LISTADO_ELSI":90,"ELSE_FIJO":91,"ELSE_IF":92,"R_Else":93,"R_Switch":94,"LISTA_CASE":95,"LS_CASE":96,"RED_SWITCH":97,"DEF_CASE":98,"R_Case":99,"S_DosPuntos":100,"def":101,"R_While":102,"R_Do":103,"R_For":104,"CONT_FOR":105,"FIN_FOR":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"R_Class",8:"Identificador",9:"S_LlaveAbre",11:"S_LlaveCierra",14:"S_ParentesisAbre",16:"S_ParentesisCierra",19:"R_Void",22:"R_Main",24:"S_PuntoComa",25:"S_Coma",27:"S_Igual",29:"T_Int",30:"T_String",31:"T_Boolean",32:"T_Char",33:"T_Double",34:"T_string",36:"R_Protected",37:"R_Public",38:"R_Private",39:"LOG_Concatenar",40:"LOG_OR",41:"REL_IgualIgual",42:"REL_MayorIgualQue",43:"REL_MayorQue",44:"REL_MenorIgualQue",45:"REL_MenorQue",46:"REL_Distinto",47:"OP_Mas",48:"OP_Menos",49:"OP_Multiplicacion",50:"OP_Division",51:"OP_Potencia",52:"OP_Modulo",54:"OP_Decremento",55:"OP_Incremento",56:"LOG_Not",57:"Entero",58:"Decimal",60:"R_True",61:"R_False",62:"Cadena",63:"Char",64:"CHAR_Especial",79:"R_Console",80:"S_Punto",82:"R_Write",83:"R_WriteLine",84:"R_Break",85:"R_Continue",86:"R_Return",89:"R_If",93:"R_Else",94:"R_Switch",99:"R_Case",100:"S_DosPuntos",101:"def",102:"R_While",103:"R_Do",104:"R_For"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,5],[10,2],[10,1],[12,8],[12,1],[12,2],[12,1],[12,1],[20,6],[20,7],[18,3],[23,3],[23,1],[26,3],[26,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[35,1],[35,1],[35,1],[35,0],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,2],[28,2],[28,2],[28,1],[53,1],[53,1],[53,3],[53,4],[53,1],[53,1],[53,3],[53,1],[53,1],[53,1],[53,1],[59,1],[59,3],[65,1],[65,0],[15,2],[15,1],[15,0],[67,3],[67,2],[66,2],[68,4],[68,5],[69,3],[69,1],[69,0],[21,5],[17,1],[17,0],[70,2],[70,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[72,7],[81,1],[81,1],[78,2],[78,2],[78,3],[73,2],[87,7],[88,2],[88,1],[88,1],[88,0],[90,2],[90,1],[91,4],[92,8],[77,7],[95,2],[95,1],[95,1],[95,0],[96,2],[96,1],[98,4],[97,3],[74,7],[75,9],[76,11],[105,4],[105,3],[106,3],[106,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log(JSON.stringify($$[$0-1], null, 2)); return $$[$0-1];
break;
case 2: case 6: case 78:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 7: case 60: case 65: case 73:
this.$ = [$$[$0]];
break;
case 4: case 12: case 89:
this.$ ='';erroresSintacticos.push({ Tipo_Error  : ' Error_Sintactico ', Error  : yytext , Fila  : this._$.first_line , Columna  :  this._$.first_column });erroresLexicosYSintacticos.push({ Tipo_Error  : ' Error_Sintactico ', Error  : yytext , Fila  : this._$.first_line , Columna  :  this._$.first_column });
break;
case 5:
ArchivoJson.push({Tipo:'Clase', Nombre: $$[$0-3] , Contenido: metodosT });metodosT = [];this.$ = API.n_Clase($$[$0-3],$$[$0-1]); 
break;
case 8:
metodosT.push({Tipo : 'Funcion',Tipo_Retorno : $$[$0-7],Nombre : $$[$0-6], Parametros : parametroT,Contenido : varA});parametroT = [];varA=[];this.$ =API.n_Metodo_Funcion($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 9:
varA = [];this.$=$$[$0];
break;
case 10:
this.$ =$$[$0];
break;
case 13:
metodosT.push({Tipo : 'Main', Contenido : varA}); varA = [];this.$ = API.n_Metodo_Principal($$[$0-1]);
break;
case 14:
metodosT.push({Tipo : 'Metodo',Nombre : $$[$0-6], Parametros : parametroT,Contenido : varA});parametroT = []; varA = [];this.$ = API.n_Metodo($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 15:

        $$[$0-1].forEach(element =>{
            varA.push({Tipo : $$[$0-2], Nombre : element.Identificador});
        });
        this.$ = API.n_Declaracion($$[$0-2] , $$[$0-1]);
break;
case 16:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 17:
this.$ = [$$[$0]]
break;
case 18:
this.$ = API.n_Variable($$[$0-2],$$[$0])
break;
case 19:
this.$ = API.n_Variable($$[$0],'undefined')
break;
case 20:
this.$ = TIPO.INT; 
break;
case 21:
this.$ = TIPO.STRING; 
break;
case 22:
this.$ = TIPO.BOOLEAN; 
break;
case 23:
this.$ = TIPO.CHAR; 
break;
case 24:
this.$ = TIPO.DOUBLE; 
break;
case 25:
this.$ = TIPO.string;
break;
case 26: case 27: case 28: case 62: case 76:
this.$ = $$[$0];
break;
case 29:
 this.$ = 'undefined'; 
break;
case 30:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.AND); 
break;
case 31:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.OR); 
break;
case 32:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.IGUAL_IGUAL); 
break;
case 33:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_IGUAL_QUE); 
break;
case 34:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_QUE); 
break;
case 35:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_IGUAL_QUE); 
break;
case 36:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_QUE); 
break;
case 37:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.DISTINTO); 
break;
case 38:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA); 
break;
case 39:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA); 
break;
case 40:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION); 
break;
case 41:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION); 
break;
case 42:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.POTENCIA); 
break;
case 43:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MODULO); 
break;
case 44:
 this.$ = API.operacion_Unaria($$[$0-1],TIPO_OPERACION.MODULO); 
break;
case 45:
 this.$ = API.operacion_Unaria($$[$0-1],TIPO_OPERACION.DECREMENTO); 
break;
case 46:
 this.$ = API.operacion_Unaria($$[$0],TIPO_OPERACION.NEGATIVO); 
break;
case 47:
 this.$ = API.operacion_Unaria($$[$0],TIPO_OPERACION.NOT); 
break;
case 48:
 this.$ = $$[$0]; 
break;
case 49:
this.$ = API.n_Dato($$[$0],TIPO.INT); 
break;
case 50:
this.$ = API.n_Dato($$[$0],TIPO.DOUBLE); 
break;
case 51:
this.$ = API.n_Funcion($$[$0-2],'undefined');
break;
case 52:
this.$ = API.n_Funcion($$[$0-3],API.n_Parametro($$[$0-1]));
break;
case 53: case 54:
this.$ = API.n_Dato($$[$0],TIPO.BOOLEAN); 
break;
case 55:
this.$ = $$[$0-1];
break;
case 56:
this.$ = API.n_Dato($$[$0],TIPO.IDENTIFICADOR); 
break;
case 57:
this.$ = API.n_Dato($$[$0],TIPO.STRING); 
break;
case 58: case 59:
this.$ = API.n_Dato($$[$0],TIPO.CHAR); 
break;
case 61:
$$[$0-2].push($$[$0-1]); this.$ = $$[$0-2];
break;
case 63:
this.$='undefined';
break;
case 64:

        var obj_if = []; 
        if(Array.isArray($$[$0]) && !Array.isArray($$[$0-1])){
            $$[$0].unshift($$[$0-1]); 
            this.$ = $$[$0];
        }else if(Array.isArray($$[$0-1]) && !Array.isArray($$[$0])){
            $$[$0-1].push($$[$0]); 
            this.$ = $$[$0-1];
        } else{
                obj_if.push($$[$0]);
                obj_if.unshift($$[$0-1]);
                this.$ = obj_if;
        } 
    
break;
case 66: case 74: case 77:
this.$='';
break;
case 67:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 68:
this.$ =[$$[$0]];
break;
case 69:
parametroT.push({Tipo : $$[$0-1],Nombre: $$[$0]});this.$ = API.n_ParametroM($$[$0-1],$$[$0]);
break;
case 70:
this.$ = API.n_Asignacion($$[$0-3],$$[$0-1]);
break;
case 71:
this.$ = API.n_Funcion($$[$0-4],API.n_Parametro($$[$0-2]));
break;
case 72:
 $$[$0-2].push($$[$0]);  this.$ = $$[$0-2];
break;
case 75:
this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 79:
if(Array.isArray($$[$0])){this.$ = $$[$0]; }else{this.$ = [$$[$0]];}
break;
case 90:
this.$ = API.n_Impresion($$[$0-2],$$[$0]);
break;
case 93:
 this.$ = API.n_Break(); 
break;
case 94:
 this.$ = API.n_Continue(); 
break;
case 95:
 this.$ = API.n_Return($$[$0-1]); 
break;
case 96:
 
        var obj_if = []; 
        if($$[$0] !=null){
            if(Array.isArray($$[$0-1]) && !Array.isArray($$[$0])){
                $$[$0-1].push($$[$0]); 
                this.$ = $$[$0-1];
            }else if(Array.isArray($$[$0]) && !Array.isArray($$[$0-1])){
                $$[$0].unshift($$[$0-1]); 
                this.$ = $$[$0];
            } else{
                obj_if.push($$[$0]);
                obj_if.unshift($$[$0-1]);
                this.$ = obj_if;
            }
        }else{
            this.$ = $$[$0-1];
        }
    
break;
case 97:
this.$ = API.n_If($$[$0-4],$$[$0-1]);
break;
case 98: case 107:
 
        var obj_if = []; 
        if(Array.isArray($$[$0-1]) && !Array.isArray($$[$0])){
            $$[$0-1].push($$[$0]); 
            this.$ = $$[$0-1];
        }else if(Array.isArray($$[$0]) && !Array.isArray($$[$0-1])){
            $$[$0].unshift($$[$0-1]); 
            this.$ = $$[$0];
        } else{
            obj_if.push($$[$0]);
            obj_if.unshift($$[$0-1]);
            this.$ = obj_if;
        }
    
break;
case 99: case 108:
  
        var obj_if = []; 
        if(Array.isArray($$[$0])){ 
            this.$ =$$[$0];
        } else{ 
            obj_if.push($$[$0]);
            this.$ = obj_if;
        }
    
break;
case 100: case 109:
 
        var obj_if = []; 
        if(Array.isArray($$[$0])){ 
            this.$ =$$[$0];
        } else{ 
            obj_if.push($$[$0]);
            this.$ = obj_if;
        } 
    
break;
case 102: case 111:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];  
break;
case 103: case 112:
 this.$ = [$$[$0]];  
break;
case 104:
 this.$ = API.n_Else($$[$0-1]);  
break;
case 105:
 this.$ = API.n_ElseIf($$[$0-4],$$[$0-1]); 
break;
case 106:
this.$ = API.n_Switch($$[$0-4],$$[$0-1]); 
break;
case 113:
this.$ = API.n_Case($$[$0-2],$$[$0]);
break;
case 114:
this.$ = API.n_Default($$[$0]);
break;
case 115:
this.$ = API.n_While($$[$0-4],$$[$0-1]);
break;
case 116:
 this.$ = API.n_DoWhile($$[$0-6],$$[$0-2]); 
break;
case 117:
 this.$ = API.n_For( $$[$0-8] , $$[$0-6] , $$[$0-4] , $$[$0-1]); 
break;
case 118:
this.$ = API.n_Declaracion($$[$0-3] , API.n_Variable($$[$0-2],$$[$0]));
break;
case 119: case 120:
this.$ = API.n_Asignacion($$[$0-2],$$[$0]);
break;
}
},
table: [{2:[1,4],3:1,4:2,6:3,7:$V0},{1:[3]},{5:[1,6],6:7,7:$V0},o($V1,[2,3]),o($V1,[2,4]),{8:[1,8]},{1:[2,1]},o($V1,[2,2]),{9:[1,9]},{2:$V2,8:$V3,10:10,12:11,13:12,18:13,19:$V4,21:15,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va},{2:$V2,8:$V3,11:[1,24],12:25,13:12,18:13,19:$V4,21:15,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va},o($Vb,[2,7]),{8:[1,26],23:27,26:28},o($Vb,[2,9]),{8:[1,31],20:29,22:[1,30]},o($Vb,[2,11]),o($Vb,[2,12]),{8:[2,20]},{8:[2,21]},{8:[2,22]},{8:[2,23]},{8:[2,24]},{8:[2,25]},{14:[1,32]},o($V1,[2,5]),o($Vb,[2,6]),o($Vc,$Vd,{14:[1,33],27:$Ve}),{24:[1,35],25:[1,36]},o($Vc,[2,17]),o($Vb,[2,10]),{14:[1,37]},{14:[1,38]},o($Vf,$Vg,{69:39,28:40,53:41,8:$Vh,14:$Vi,48:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr}),{13:55,15:53,16:$Vs,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,66:54},{8:$Vh,14:$Vi,28:56,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},o([2,8,11,19,29,30,31,32,33,34,79,84,85,86,89,94,99,101,102,103,104],[2,15]),{8:$Vt,26:57},{16:[1,59]},{13:55,15:60,16:$Vs,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,66:54},{16:[1,61],25:$Vu},o($Vf,[2,73],{39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI}),o($VJ,[2,48],{54:[1,77],55:[1,78]}),{8:$Vh,14:$Vi,28:79,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{8:$Vh,14:$Vi,28:80,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},o($VK,[2,49]),o($VK,[2,50]),o($VK,$VL,{14:$VM}),o($VK,[2,53]),o($VK,[2,54]),{8:$Vh,14:$Vi,28:82,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},o($VK,[2,57]),o($VK,[2,58]),o($VK,[2,59]),{16:[1,83]},{16:[2,65],25:[1,85],67:84},{8:[1,86]},o($Vc,[2,18],{39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI}),o($Vc,[2,16]),o($Vc,$Vd,{27:$Ve}),{9:[1,87]},{16:[1,88]},{24:[1,89]},{8:$Vh,14:$Vi,28:90,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{8:$Vh,14:$Vi,28:91,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{8:$Vh,14:$Vi,28:92,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{8:$Vh,14:$Vi,28:93,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{8:$Vh,14:$Vi,28:94,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{8:$Vh,14:$Vi,28:95,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{8:$Vh,14:$Vi,28:96,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{8:$Vh,14:$Vi,28:97,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{8:$Vh,14:$Vi,28:98,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{8:$Vh,14:$Vi,28:99,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{8:$Vh,14:$Vi,28:100,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{8:$Vh,14:$Vi,28:101,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{8:$Vh,14:$Vi,28:102,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{8:$Vh,14:$Vi,28:103,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{8:$Vh,14:$Vi,28:104,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},o($VJ,[2,44]),o($VJ,[2,45]),o($VJ,[2,46]),o($VJ,[2,47]),{8:$Vh,14:$Vi,16:[1,105],28:107,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,59:106,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{16:[1,108],39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI},{9:[1,109]},{16:[2,64],25:[1,110]},{13:55,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,66:111},o($Vf,[2,69]),{2:$VN,8:$VO,11:$VP,13:126,17:112,18:116,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,68:115,70:113,71:114,72:117,73:118,74:119,75:120,76:121,77:122,78:123,79:$VQ,84:$VR,85:$VS,86:$VT,87:128,89:$VU,94:$VV,102:$VW,103:$VX,104:$VY},{9:[1,137]},o($Vb,[2,75]),o($Vf,[2,72],{39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI}),o($VZ,[2,30],{41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI}),o($VZ,[2,31],{41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI}),o($V_,[2,32],{47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI}),o($V_,[2,33],{47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI}),o($V_,[2,34],{47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI}),o($V_,[2,35],{47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI}),o($V_,[2,36],{47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI}),o($V_,[2,37],{47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI}),o($V$,[2,38],{49:$VF,50:$VG,51:$VH,52:$VI}),o($V$,[2,39],{49:$VF,50:$VG,51:$VH,52:$VI}),o($V01,[2,40],{51:$VH,52:$VI}),o($V01,[2,41],{51:$VH,52:$VI}),o($VJ,[2,42]),o($VJ,[2,43]),o($VK,[2,51]),{16:[1,138],25:[1,139]},o($Vf,[2,60],{39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI}),o($VK,[2,55]),{2:$VN,8:$VO,11:$VP,13:126,17:140,18:116,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,68:115,70:113,71:114,72:117,73:118,74:119,75:120,76:121,77:122,78:123,79:$VQ,84:$VR,85:$VS,86:$VT,87:128,89:$VU,94:$VV,102:$VW,103:$VX,104:$VY},{13:55,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,66:141},o($Vf,[2,68]),{11:[1,142]},o($V11,[2,76],{68:115,18:116,72:117,73:118,74:119,75:120,76:121,77:122,78:123,13:126,87:128,71:143,2:$VN,8:$VO,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,79:$VQ,84:$VR,85:$VS,86:$VT,89:$VU,94:$VV,102:$VW,103:$VX,104:$VY}),o($V21,[2,79]),o($V21,[2,80]),o($V21,[2,81]),o($V21,[2,82]),o($V21,[2,83]),o($V21,[2,84]),o($V21,[2,85]),o($V21,[2,86]),o($V21,[2,87]),o($V21,[2,88]),o($V21,[2,89]),{14:[1,145],27:[1,144]},{8:$Vt,23:27,26:28},{80:[1,146]},o($V21,[2,101],{88:147,90:148,91:149,92:150,93:$V31}),{14:[1,152]},{9:[1,153]},{14:[1,154]},{14:[1,155]},{24:[1,156]},{24:[1,157]},{8:$Vh,14:$Vi,24:[2,63],28:159,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:158},{14:[1,160]},{2:$VN,8:$VO,11:$VP,13:126,17:161,18:116,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,68:115,70:113,71:114,72:117,73:118,74:119,75:120,76:121,77:122,78:123,79:$VQ,84:$VR,85:$VS,86:$VT,87:128,89:$VU,94:$VV,102:$VW,103:$VX,104:$VY},o($VK,[2,52]),{8:$Vh,14:$Vi,28:162,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{11:[1,163]},o($Vf,[2,67]),o($Vb,[2,13]),o($V21,[2,78]),{8:$Vh,14:$Vi,28:164,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},o($Vf,$Vg,{28:40,53:41,69:165,8:$Vh,14:$Vi,48:$Vj,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr}),{81:166,82:[1,167],83:[1,168]},o($V21,[2,96]),o($V21,[2,99],{91:169,92:170,93:$V31}),o($V21,[2,100]),o($V41,[2,103]),{9:[1,171],89:[1,172]},{8:$Vh,14:$Vi,28:173,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{2:$VN,8:$VO,11:$VP,13:126,17:174,18:116,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,68:115,70:113,71:114,72:117,73:118,74:119,75:120,76:121,77:122,78:123,79:$VQ,84:$VR,85:$VS,86:$VT,87:128,89:$VU,94:$VV,102:$VW,103:$VX,104:$VY},{8:[1,177],13:176,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,105:175},{8:$Vh,14:$Vi,28:178,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},o($V21,[2,93]),o($V21,[2,94]),{24:[1,179]},{24:[2,62],39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI},{8:$Vh,14:$Vi,28:180,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{11:[1,181]},o($Vf,[2,61],{39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI}),o($Vb,[2,8]),{24:[1,182],39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI},{16:[1,183],25:$Vu},{14:[1,184]},{14:[2,91]},{14:[2,92]},o($V21,[2,98]),o($V41,[2,102]),{2:$VN,8:$VO,11:$VP,13:126,17:185,18:116,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,68:115,70:113,71:114,72:117,73:118,74:119,75:120,76:121,77:122,78:123,79:$VQ,84:$VR,85:$VS,86:$VT,87:128,89:$VU,94:$VV,102:$VW,103:$VX,104:$VY},{14:[1,186]},{16:[1,187],39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI},{11:[1,188]},{24:[1,189]},{8:[1,190]},{27:[1,191]},{16:[1,192],39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI},o($V21,[2,95]),{16:[1,193],39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI},o($Vb,[2,14]),o($V21,[2,70]),{24:[1,194]},{8:$Vh,14:$Vi,28:195,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{11:[1,196]},{8:$Vh,14:$Vi,28:197,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{9:[1,198]},{102:[1,199]},{8:$Vh,14:$Vi,28:200,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{27:[1,201]},{8:$Vh,14:$Vi,28:202,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{9:[1,203]},{9:[1,204]},o($V21,[2,71]),{16:[1,205],39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI},o($V21,[2,104]),{16:[1,206],39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI},{2:$VN,8:$VO,11:$VP,13:126,17:207,18:116,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,68:115,70:113,71:114,72:117,73:118,74:119,75:120,76:121,77:122,78:123,79:$VQ,84:$VR,85:$VS,86:$VT,87:128,89:$VU,94:$VV,102:$VW,103:$VX,104:$VY},{14:[1,208]},{24:[1,209],39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI},{8:$Vh,14:$Vi,28:210,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{24:[2,119],39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI},{11:[2,110],95:211,96:212,97:213,98:214,99:$V51,101:$V61},{2:$VN,8:$VO,11:$VP,13:126,17:217,18:116,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,68:115,70:113,71:114,72:117,73:118,74:119,75:120,76:121,77:122,78:123,79:$VQ,84:$VR,85:$VS,86:$VT,87:128,89:$VU,94:$VV,102:$VW,103:$VX,104:$VY},{24:[1,218]},{9:[1,219]},{11:[1,220]},{8:$Vh,14:$Vi,28:221,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{8:[1,223],14:$Vi,28:224,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,106:222},{24:[2,118],39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI},{11:[1,225]},{11:[2,108],97:226,98:227,99:$V51,101:$V61},{11:[2,109]},o($V11,[2,112]),{100:[1,228]},{8:$Vh,14:$Vi,28:229,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{11:[1,230]},o($V21,[2,90]),{2:$VN,8:$VO,11:$VP,13:126,17:231,18:116,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,68:115,70:113,71:114,72:117,73:118,74:119,75:120,76:121,77:122,78:123,79:$VQ,84:$VR,85:$VS,86:$VT,87:128,89:$VU,94:$VV,102:$VW,103:$VX,104:$VY},o($V21,[2,115]),{16:[1,232],39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI},{16:[1,233]},o([16,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55],$VL,{14:$VM,27:[1,234]}),{16:[2,121],39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI},o($V21,[2,106]),{11:[2,107]},o($V11,[2,111]),{2:$VN,8:$VO,11:$VP,13:126,17:235,18:116,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,68:115,70:113,71:114,72:117,73:118,74:119,75:120,76:121,77:122,78:123,79:$VQ,84:$VR,85:$VS,86:$VT,87:128,89:$VU,94:$VV,102:$VW,103:$VX,104:$VY},{39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI,100:[1,236]},o($V41,[2,97]),{11:[1,237]},{24:[1,238]},{9:[1,239]},{8:$Vh,14:$Vi,28:240,48:$Vj,53:41,56:$Vk,57:$Vl,58:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr},{11:[2,114]},o($V11,$VP,{70:113,71:114,68:115,18:116,72:117,73:118,74:119,75:120,76:121,77:122,78:123,13:126,87:128,17:241,2:$VN,8:$VO,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,79:$VQ,84:$VR,85:$VS,86:$VT,89:$VU,94:$VV,102:$VW,103:$VX,104:$VY}),o($V41,[2,105]),o($V21,[2,116]),{2:$VN,8:$VO,11:$VP,13:126,17:242,18:116,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,68:115,70:113,71:114,72:117,73:118,74:119,75:120,76:121,77:122,78:123,79:$VQ,84:$VR,85:$VS,86:$VT,87:128,89:$VU,94:$VV,102:$VW,103:$VX,104:$VY},{16:[2,120],39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI},o($V11,[2,113]),{11:[1,243]},o($V21,[2,117])],
defaultActions: {6:[2,1],17:[2,20],18:[2,21],19:[2,22],20:[2,23],21:[2,24],22:[2,25],167:[2,91],168:[2,92],213:[2,109],226:[2,107],235:[2,114]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const TIPO = require('./Api_ReporteAst').TIPO;
    const TIPO_OPERACION = require('./Api_ReporteAst').TIPO_OPERACION;
    const INSTRUCCIONES_CONST = require('./Api_ReporteAst').TIPO_INSTRUCCION;
    const API = require('./Api_ReporteAst').API;
    let erroresLexicos = [];
    let erroresSintacticos = [];
    let erroresLexicosYSintacticos = [];

    exports.errL = function(){
        return erroresLexicos;
    }

    exports.errS = function(){
        return erroresSintacticos;
    }

    exports.LimpiarV = function(){
        erroresLexicos = [];
        erroresSintacticos = [];
        erroresLexicosYSintacticos = [];
    }

    exports.errLS = function(){
        return erroresLexicosYSintacticos;
    } 
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* salta espacios en blanco */
break;
case 1:/* comentario simple*/
break;
case 2:/*comentario multilinea*/
break;
case 3:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 62; 
break;
case 4:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 64;
break;
case 5:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 63;
break;
case 6:return 29;
break;
case 7:return 33;
break;
case 8:return 31;
break;
case 9:return 32;
break;
case 10:return 30;
break;
case 11:return 34;
break;
case 12:return 'R_Import';
break;
case 13:return 7;
break;
case 14:return 19;
break;
case 15:return 22;
break;
case 16:return 89;
break;
case 17:return 93;
break;
case 18:return 94;
break;
case 19:return 104;
break;
case 20:return 102;
break;
case 21:return 103;
break;
case 22:return 84;
break;
case 23:return 85;
break;
case 24:return 86;
break;
case 25:return 37;
break;
case 26:return 36;
break;
case 27:return 38;
break;
case 28:return 79;
break;
case 29:return 'R_Out';
break;
case 30:return 83;
break;
case 31:return 82;
break;
case 32:return 60;
break;
case 33:return 61;
break;
case 34:return 99;
break;
case 35:return 101;
break;
case 36:return 100;
break;
case 37:return 24;
break;
case 38:return 9;
break;
case 39:return 11;
break;
case 40:return 14;
break;
case 41:return 16;
break;
case 42:return 80;
break;
case 43:return 'S_ComillaSimple';
break;
case 44:return 25;
break;
case 45:return 'S_ComillaDoble';
break;
case 46:return 55;
break;
case 47:return 54;
break;
case 48:return 47;
break;
case 49:return 48;
break;
case 50:return 49;
break;
case 51:return 50;
break;
case 52:return 51;
break;
case 53:return 52;
break;
case 54:return 44;
break;
case 55:return 42;
break;
case 56:return 41;
break;
case 57:return 27;
break;
case 58:return 46;
break;
case 59:return 45;
break;
case 60:return 43;
break;
case 61:return 56;
break;
case 62:return 39;
break;
case 63:return 40;
break;
case 64:return 58;
break;
case 65:return 57;
break;
case 66:return 8;
break;
case 67:return 5;
break;
case 68:erroresLexicos.push({Tipo_Error: 'Error_Lexico',Error : yy_.yytext , Fila  : yy_.yylloc.first_line , Columna  :  yy_.yylloc.first_column });erroresLexicosYSintacticos.push({ Tipo_Error  : ' Error_Lexico ', Error  : yy_.yytext , Fila  : yy_.yylloc.first_line , Columna  :  yy_.yylloc.first_column });
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/,/^(?:[\'][\\][\"\'nrt\\][\'])/,/^(?:[\'][^\'\\\"][\'])/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:string\b)/,/^(?:import\b)/,/^(?:class\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:public\b)/,/^(?:protected\b)/,/^(?:private\b)/,/^(?:Console\b)/,/^(?:out\b)/,/^(?:WriteLine\b)/,/^(?:Write\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:\\')/,/^(?:,)/,/^(?:")/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizadorC;
exports.Parser = analizadorC.Parser;
exports.parse = function () { return analizadorC.parse.apply(analizadorC, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}